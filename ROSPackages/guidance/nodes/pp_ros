#!/usr/bin/env python

import rospy

from turtlesim.msg import Pose
from geometry_msgs.msg import Twist
from std_srvs.srv import Trigger

from pure_pursuit import PurePursuit

class PurePursuitROSWrapper:
    
    def __init__(self):
        # Initialize a Pure Pursuit path planning object
        self.pp = PurePursuit()

        # Create subscribers
        ## Topics
        rospy.Subscriber("/follower/pose", Pose, self.pose_follower)
        rospy.Subscriber("/leader/pose", Pose, self.pose_leader)

        #Create publishers
        self.publish_velocity = rospy.Publisher("/follower/cmd_vel",
                                           Twist, 
                                           queue_size=10)

    def pose_follower(self, msg):
        self.pp.set_pose(msg.x,msg.y,msg.theta,'F')
        self.pub_nu()

    def pose_leader(self, msg):
        self.pp.set_pose(msg.x,msg.y,msg.theta,'L')
        self.pub_nu()

    def pub_nu(self):
        self.pp.set_nu()
        self.pp.limit_nu()
        nu = Twist()
        nu.linear.x = self.pp.nu_b[0]
        nu.linear.y = self.pp.nu_b[1]
        nu.angular.z = self.pp.nu_b[2]

        #print(nu)

        self.publish_velocity.publish(nu)

if __name__=='__main__':
    try:
        rospy.init_node('pure_pursuit')
        pp_wrapper = PurePursuitROSWrapper()
        rospy.loginfo("Well it initilized, hopefully it is working.")
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
