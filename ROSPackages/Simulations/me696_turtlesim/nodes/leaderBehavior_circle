#!/usr/bin/env python3

import rospy
from geometry_msgs.msg import Twist

from math import pi, cos, sin

def kinematicCircleVelocity():
    #Set up ros node
    rospy.init_node('leaderBehavior_circle')
    rate = rospy.Rate(10)

    #Publishers
    vel = rospy.Publisher('/leader/cmd_vel',Twist,queue_size=10)

    #Initialize required variables
    circle = rospy.get_param('/circle',{'time':30, 'radius':4})
    omega = 2*pi/circle['time']
    R = circle['radius']
    u = R*omega
    nu = Twist()
    nu.linear.y = 0

    #Continuously update speed to continue traversing a circle
    while not rospy.is_shutdown():
        #Update speeds if there is a parameter available
        if rospy.has_param('/circle/radius'):
            circle['radius'] = rospy.get_param('/circle/radius')
            R = circle['radius']
            u = R*omega


        if rospy.has_param('/circle/time'):
            circle['time'] = rospy.get_param('/circle/time')
            omega = 2*pi/circle['time']
            u = R*omega

        #Populate the nu vector
        nu.linear.x = u
        nu.angular.z = omega

        #Publish the nu vector
        vel.publish(nu)

        #Wait to publish the next value until the time is right
        rate.sleep()

if __name__ == '__main__':
    try:
        kinematicCircleVelocity()
    except rospy.ROSInterruptException:
        pass
